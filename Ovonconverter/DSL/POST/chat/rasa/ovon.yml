assign_values:
  assign:
    request: ${incoming.body}

extractProtocolHeader:
  call: http.post
  args:
    url: "[#DMAPPER_URL]:[#DMAPPER_PORT]/convert/protocol-header"
    body:
      protocol: ${incoming.headers}
  result: convertedProtocol

assignProtocolVersion:
  assign:
    version: ${convertedProtocol.response.body}

convertOvonToByk:
  call: http.post
  args:
    url: "[#DMAPPER_URL]:[#DMAPPER_PORT]/dmapper/ovonToByk-${version}"
    body:
      request: ${request}
      type: "message"
      eventType: "whisper"
      protocolVersion: ${version}
  result: bykRequest

assignSessionId:
  assign:
    sessionId: ${bykRequest.response.body.data.message.chatId}

sendMessageToRasa:
  call: http.post
  args:
    url: "[#RASA_URL]:[#RASA_PORT]/conversations/${sessionId}/messages"
    body:
      text: ${bykRequest.response.body.data.message.content}
      sender: "user"
  result: rasaMessageResult

checkIntent:
  switch:
    - condition: ${rasaMessageResult.response.body.latest_message.intent_ranking[0].name.includes('nlu_fallback')}
      next: createErrorResponse
  next: getIntentMessage

createErrorResponse:
  call: http.post
  args:
    url: "[#DMAPPER_URL]:[#DMAPPER_PORT]/dmapper/bykMessageResponse"
    body:
      id: ${request.ovon.conversation.id}
      lastMessage: "Ma ei saanud päris täpselt aru."
  result: convertedResponse
  next: convertBykToOvon

getIntentMessage:
  call: http.post
  args:
    url: "[#RASA_URL]:[#RASA_PORT]/conversations/${sessionId}/trigger_intent"
    body:
      name: ${rasaMessageResult.response.body.latest_message.intent_ranking[0].name}
  result: intentResponse

createResponse:
  call: http.post
  args:
    url: "[#DMAPPER_URL]:[#DMAPPER_PORT]/dmapper/bykMessageResponse"
    body:
      id: ${sessionId}
      lastMessage: ${intentResponse.response.body.messages[0].text}
  result: convertedResponse

convertBykToOvon:
  call: http.post
  args:
    url: "[#DMAPPER_URL]:[#DMAPPER_PORT]/dmapper/bykToOvon-${version}"
    body:
      bykResponse: ${convertedResponse.response.body.data}
      eventType: "whisper"
  result: ovonResult

returnSuccess:
  return: ${ovonResult.response.body}
  next: end